backend/
  app.py
  requirements.txt
frontend/
  node_modules/
  src/
    App.jsx
    index.css
    main.jsx
    store.js
    utils/
      converters.js
    components/
      DownloadModal.jsx
      EditorModal.jsx
      Footer.jsx
      GalleryGrid.jsx
      GlobalHotkeys.jsx
      Header.jsx
      HelpDrawer.jsx
      ListView.jsx
      Thumbnail.jsx
      TransparentGalleryHeader.jsx
      UploadZone.jsx
      WelcomeOverlay.jsx
  .gitignore
  eslint.config.js
  index.html
  package.json
  postcss.config.js
  tailwind.config.js
  vite.config.js


// ===== backend/app.py =====
from flask import Flask, send_from_directory
from flask_cors import CORS
import pathlib

DIST = pathlib.Path(__file__).resolve().parent.parent / 'frontend' / 'dist'

app = Flask(__name__, static_folder=DIST, static_url_path='')
CORS(app)

@app.route('/')
def index():
    return send_from_directory(DIST, 'index.html')

@app.route('/<path:path>')
def assets(path):
    return send_from_directory(DIST, path)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)


// ===== backend/requirements.txt =====
blinker==1.9.0
click==8.2.0
colorama==0.4.6
Flask==3.1.1
flask-cors==5.0.1
itsdangerous==2.2.0
Jinja2==3.1.6
MarkupSafe==3.0.2
Werkzeug==3.1.3


// ===== frontend/src/App.jsx =====
// src/App.jsx
import React from 'react'
import { CssBaseline, ThemeProvider, createTheme } from '@mui/material'
import useStore from './store'

import GlobalHotkeys   from './components/GlobalHotkeys'
import WelcomeOverlay  from './components/WelcomeOverlay'
import Header          from './components/Header'
import UploadZone      from './components/UploadZone'
import EditorModal     from './components/EditorModal'
import DownloadModal   from './components/DownloadModal'
import HelpDrawer      from './components/HelpDrawer'
import GalleryGrid     from './components/GalleryGrid'
import ListView        from './components/ListView'
import Footer          from './components/Footer'

export default function App() {
  const dark = useStore(s => s.dark)
  const view = useStore(s => s.viewMode)

  const theme = createTheme({ palette: { mode: dark ? 'dark' : 'light' } })

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <GlobalHotkeys />
      <WelcomeOverlay />
      <Header />

      <main style={{ maxWidth: 1200, margin: '0 auto', padding: 24 }}>
        <UploadZone />
        <div style={{ marginTop: 32 }}>
          {view === 'grid' ? <GalleryGrid /> : <ListView />}
        </div>
      </main>

      <EditorModal />
      <DownloadModal />
      <HelpDrawer />
      <Footer />
    </ThemeProvider>
  )
}


// ===== frontend/src/index.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@keyframes shimmer {
  0% {
    background-position: -400px 0
  }

  100% {
    background-position: 400px 0
  }
}

.skeleton {
  background: linear-gradient(90deg, #e5e5e5 0%, #f3f3f3 40%, #e5e5e5 80%);
  background-size: 800px 100%;
  animation: shimmer 1.2s infinite linear;
}

.dark .skeleton {
  background: linear-gradient(90deg, #444 0%, #555 40%, #444 80%);
}

.MuiIconButton-root {
  transition: all .2s ease;
}

// ===== frontend/src/main.jsx =====
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

createRoot(document.getElementById('root')).render(<App />);


// ===== frontend/src/store.js =====
// src/store.js
import { create } from 'zustand'
import { v4 as uuid } from 'uuid'

const useStore = create((set, get) => ({
  /* UI state */
  dark: false,
  helpOpen: false,
  welcomeOpen: true,
  downloadOpen: false,
  viewMode: 'grid',
  snackbar: null,

  /* data */
  items: [],
  selected: new Set(),

  /* download options */
  downloadOpts: {
    format: 'webp',
    quality: 100,
    aspect: 'original',
    includeOriginal: false,
    resetPerImage: false,
    previewToggle: true
  },

  /* reset-undo */
  lastResetAll: null,
  undoResetTimeout: null,

  /* actions */
  showSnackbar(snack) {
    set({ snackbar: snack })
    setTimeout(() => set({ snackbar: null }), 4000)
  },
  toggleDark() {
    set(state => ({ dark: !state.dark }))
  },
  setHelp(v) { set({ helpOpen: v }) },
  setWelcome(v) { set({ welcomeOpen: v }) },
  openDownload(v) { set({ downloadOpen: v }) },
  setViewMode(m) { set({ viewMode: m }) },

  /* selection */
  toggleSelect(id) {
    set(state => {
      const s = new Set(state.selected)
      s.has(id) ? s.delete(id) : s.add(id)
      return { selected: s }
    })
  },
  clearSelection() {
    set({ selected: new Set() })
  },
  selectAll() {
    set(state => ({ selected: new Set(state.items.map(i => i.id)) }))
  },

  /* items */
  addFiles(files) {
    const newItems = files.map(f => ({
      id: uuid(),
      name: f.name,
      customName: f.name,
      url: URL.createObjectURL(f),
      urlC: null,
      sizeO: f.size,
      formats: ['webp'],
      q: 100,
      previewOff: false
    }))
    set(state => ({
      items: [...state.items, ...newItems],
      selected: new Set([...state.selected, ...newItems.map(i => i.id)])
    }))
  },
  removeItem(id) {
    set(state => ({
      items: state.items.filter(i => i.id !== id),
      selected: new Set([...state.selected].filter(x => x !== id))
    }))
  },
  updateItem(id, patch) {
    set(state => ({
      items: state.items.map(i => i.id === id ? { ...i, ...patch } : i)
    }))
  },
  clearAll() {
    set({ items: [], selected: new Set() })
  },
  resetAllChanges() {
    set(state => ({
      lastResetAll: state.items.map(i => ({ ...i })),
      items: state.items.map(i => ({
        ...i,
        customName: i.name,
        urlC: null,
        formats: ['webp'],
        q: 100,
        previewOff: false
      }))
    }))
    const t = setTimeout(() => set({ lastResetAll: null, undoResetTimeout: null }), 5000)
    set({ undoResetTimeout: t })
  },
  undoReset() {
    const prev = get().lastResetAll
    if (prev) {
      clearTimeout(get().undoResetTimeout)
      set({ items: prev, lastResetAll: null, undoResetTimeout: null })
    }
  },

  /* download options */
  setDownloadOpt(key, val) {
    set(state => ({
      downloadOpts: { ...state.downloadOpts, [key]: val }
    }))
  }
}))

export default useStore


// ===== frontend/src/utils/converters.js =====
import { saveAs } from 'file-saver';

export const compress = async (file, fmt, q) => {
	const img = await createImageBitmap(file);
	const canvas = document.createElement('canvas');
	canvas.width = img.width;
	canvas.height = img.height;
	canvas.getContext('2d').drawImage(img, 0, 0);
	return new Promise((resolve) =>
		canvas.toBlob(
			(b) =>
				resolve({
					blob: b,
					size: b.size,
					url: URL.createObjectURL(b),
				}),
			`image/${fmt}`,
			q,
		),
	);
};

export const downloadSingle = async (src, name) => {
	let blob;
	if (src instanceof Blob) blob = src;
	else {
		const response = await fetch(src);
		blob = await response.blob();
	}
	saveAs(blob, name);
};

export const downloadZip = async (entries) => {
	const { default: JSZip } = await import('jszip');
	const zip = new JSZip();
	for (const { blob, name } of entries) {
		const data = blob instanceof Blob ? blob : await (await fetch(blob)).blob();
		zip.file(name, data);
	}
	const zBlob = await zip.generateAsync({ type: 'blob' });
	saveAs(zBlob, 'shinobi.zip');
};

